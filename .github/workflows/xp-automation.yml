name: XP Automation

on:
  schedule:
    - cron: '5 */4 * * *'  # Runs every 4 hours at minute 5 (UTC)
  workflow_dispatch:        # Allows manual triggering

permissions:
  contents: write  # Changed from 'read' to 'write' to commit dashboard image

jobs:
  send-xp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install puppeteer
          npm install gifencoder
          npm install canvas

      - name: Generate Dashboard GIF
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const GIFEncoder = require('gifencoder');
          const { createCanvas, loadImage } = require('canvas');
          
          (async () => {
            console.log('ðŸŽ¬ Starting GIF generation...');
            
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            await page.setViewport({width: 800, height: 400});
            await page.goto('file://' + process.cwd() + '/dashboard.html', {waitUntil: 'networkidle2'});
            
            // Wait for animations to start
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            console.log('ðŸ“¸ Capturing frames...');
            const encoder = new GIFEncoder(800, 400);
            encoder.createWriteStream('dashboard.gif');
            encoder.start();
            encoder.setRepeat(0);   // 0 for repeat, -1 for no-repeat
            encoder.setDelay(100);  // frame delay in ms (100ms = 10fps)
            encoder.setQuality(10); // image quality. 10 is default.
            
            // Capture 50 frames (5 seconds at 10fps)
            for(let i = 0; i < 50; i++) {
              const screenshot = await page.screenshot({type: 'png'});
              const img = await loadImage(screenshot);
              const canvas = createCanvas(800, 400);
              const ctx = canvas.getContext('2d');
              ctx.drawImage(img, 0, 0);
              encoder.addFrame(ctx);
              await new Promise(resolve => setTimeout(resolve, 100));
              console.log(\`Frame \${i + 1}/50 captured\`);
            }
            
            encoder.finish();
            await browser.close();
            console.log('GIF generated successfully!');
            
            // Also create a static PNG fallback
            const browser2 = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page2 = await browser2.newPage();
            await page2.setViewport({width: 800, height: 400});
            await page2.goto('file://' + process.cwd() + '/dashboard.html', {waitUntil: 'networkidle2'});
            await page2.screenshot({path: 'dashboard.png', type: 'png'});
            await browser2.close();
            console.log('ðŸ“± PNG fallback created!');
          })();
          "

      - name: Run XP request
        run: |
          echo "ðŸ“¤ Sending XP request..."
          RESPONSE=$(curl --ssl-no-revoke -s -X POST https://api.duolingopro.net/request \
            -H "Authorization: Bearer ${{ secrets.DUOLINGO_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"gain_type": "xp", "amount": 30000}')
          echo "ðŸ“¨ Response from server:"
          echo "$RESPONSE"

      - name: Update README with new timestamp
        run: |
          # Update the last run timestamp in README
          CURRENT_TIME=$(date -u '+%H:%M UTC')
          CURRENT_DATE=$(date -u '+%Y-%m-%d')
          sed -i "s/Last Updated: .*/Last Updated: $CURRENT_DATE $CURRENT_TIME/" README.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add dashboard.gif dashboard.png README.md
          git diff --staged --quiet || git commit -m "ðŸš€ Update dashboard GIF and stats [automated]"
          git push

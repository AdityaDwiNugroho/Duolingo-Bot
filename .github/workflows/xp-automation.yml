name: XP Automation

on:
  schedule:
    - cron: '5 */4 * * *'  # Runs every 4 hours at minute 5 (UTC)
  workflow_dispatch:        # Allows manual triggering

permissions:
  contents: write

jobs:
  send-xp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Puppeteer
        run: |
          npm install puppeteer

      - name: Generate Dashboard Screenshot
        run: |
          node << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          
          (async () => {
            console.log('üì∏ Taking dashboard screenshot...');
            
            const browser = await puppeteer.launch({
              headless: 'new',
              args: [
                '--no-sandbox', 
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu'
              ]
            });
            
            try {
              const page = await browser.newPage();
              await page.setViewport({width: 800, height: 400});
              
              const htmlPath = 'file://' + process.cwd() + '/dashboard.html';
              console.log('üåê Loading:', htmlPath);
              
              await page.goto(htmlPath, {
                waitUntil: 'networkidle2',
                timeout: 30000
              });
              
              // Wait for animations
              console.log('‚è≥ Waiting for animations...');
              await page.waitForTimeout(3000);
              
              // Take screenshot
              await page.screenshot({
                path: 'dashboard.png',
                type: 'png',
                clip: { x: 0, y: 0, width: 800, height: 400 }
              });
              
              console.log('Screenshot saved as dashboard.png');
              
              // For now, copy PNG as GIF (we'll make it animated later)
              fs.copyFileSync('dashboard.png', 'dashboard.gif');
              console.log('dashboard.gif created');
              
            } catch (error) {
              console.error('Error:', error);
              throw error;
            } finally {
              await browser.close();
            }
          })();
          EOF

      - name: Run XP request
        run: |
          echo "üì§ Sending XP request..."
          RESPONSE=$(curl --ssl-no-revoke -s -X POST https://api.duolingopro.net/request \
            -H "Authorization: Bearer ${{ secrets.DUOLINGO_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"gain_type": "xp", "amount": 30000}')
          echo "üì® Response from server:"
          echo "$RESPONSE"

      - name: Update README timestamp
        run: |
          CURRENT_TIME=$(date -u '+%H:%M UTC')
          CURRENT_DATE=$(date -u '+%Y-%m-%d')
          
          # Update timestamp in README if it exists
          if [ -f "README.md" ]; then
            sed -i "s/Last Updated: .*/Last Updated: $CURRENT_DATE $CURRENT_TIME/" README.md
            echo "README timestamp updated"
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "üìÅ Files in directory:"
          ls -la dashboard.*
          
          # Add files that exist
          [ -f "dashboard.png" ] && git add dashboard.png && echo "Added dashboard.png"
          [ -f "dashboard.gif" ] && git add dashboard.gif && echo "Added dashboard.gif"  
          [ -f "README.md" ] && git add README.md && echo "Added README.md"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            echo "üìù Committing changes..."
            git commit -m "üöÄ Update dashboard [$(date -u '+%Y-%m-%d %H:%M UTC')]"
            git push
            echo "Changes pushed successfully!"
          fi
